---
layout: post
title:  "[RxJava] RxJava 정리 - (2) - 생산자와 소비자"
subtitle:   "Rxjava"
categories: devlog
tags: rxjava
comments: true
---

저번 포스트를 다시 정리해 보면 옵저버 패턴을 잘 이용하면 **데이터를 생성하는 측**과 **데이터를 소비하는 측**으로 나눌 수 있기 때문에 **쉽게 데이터 스트림을 처리할 수 있다.**
라고 하였습니다.

이번 포스트에서 다룰 생산자는 **데이터를 생성해서 전달만 하는 역할**만 하는 것이고
생산자를 다루기 전에 **데이터를 소비하는 역할**만 하는 **소비자**에 대해 알아 보겠습니다.


데이터를 소비하는 방법은 **Consumer방식**과 **Observer방식** 두가지 방식이 있습니다.

먼저 Observer 방식부터 설명 하겠습니다.

## Observer방식

Observer는 아래와 같은 인터페이스 형태로 되어 있고

```java
public interface Observer<T> {
    void onSubscribe(@NonNull Disposable d);
    void onNext(@NonNull T t);
    void onError(@NonNull Throwable e);
    void onComplete();
}
```

해당 인터페이스를 상속 받아서 아래와 같이 커스텀 옵저버를 구현해 줄 수 있습니다.(그냥 Observer 인터페이스 상속받아서 바로 사용해도 됩니다.)

```kotlin
class CustomObserver<T>(
    private val compositeDisposable: CompositeDisposable,
    private val onNextAction: (T) -> Unit
) : Observer<T> {
    override fun onComplete() {
        // no-op
    }

    override fun onSubscribe(d: Disposable) {
        compositeDisposable.add(d)
    }

    override fun onNext(t: T) {
        onNextAction(t)
    }

    override fun onError(e: Throwable) {
        //ErrorUtil.handleError(e)
    }
}
```

```kotlin

    val compositeDisposable = CompositeDisposable()
    val customObserver = CustomObserver<Int>(compositeDisposable) { println(it)}

    Observable.just(1, 2, 3)
        .subscribe(customObserver)

```
**실행 결과**
![image](https://user-images.githubusercontent.com/43161981/81480332-0ff01a80-9264-11ea-8703-10fdf46021e5.png)



**▼ Observer 방식일 때의 subscribe() 함수**
```java
    @SchedulerSupport(SchedulerSupport.NONE)
    @Override
    public final void subscribe(Observer<? super T> observer) {
        ObjectHelper.requireNonNull(observer, "observer is null");
        try {
            observer = RxJavaPlugins.onSubscribe(this, observer);

            ObjectHelper.requireNonNull(observer, "The RxJavaPlugins.onSubscribe hook returned a null Observer. Please change the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins");

            subscribeActual(observer);
        } catch (NullPointerException e) { // NOPMD
            throw e;
        } catch (Throwable e) {
            Exceptions.throwIfFatal(e);
            // can't call onError because no way to know if a Disposable has been set or not
            // can't call onSubscribe because the call might have set a Subscription already
            RxJavaPlugins.onError(e);

            NullPointerException npe = new NullPointerException("Actually not, but can't throw other exceptions due to RS");
            npe.initCause(e);
            throw npe;
        }
    }
```




## Consumer방식

하지만 위와 같은 Observer방식은 거의 사용되지 않는다고 들었고
아래와 같은 **Consumer 방식**이 가장 많이 쓰인다고 합니다. (이유는 편해서..??)


```kotlin
    Observable.just(1, 2, 3)
        .subscribe({
            println(it)
        }, {
            println(it)
        })
```

**실행결과**
![image](https://user-images.githubusercontent.com/43161981/81480332-0ff01a80-9264-11ea-8703-10fdf46021e5.png)

위와 동일한 코드이므로 당연히 실행결과는 같고 위와는 subscribe()함수가 다른 것을 알 수 있습니다.

**▼ Consumer 방식일 때의 subscribe() 함수**

```java
    @CheckReturnValue
    @SchedulerSupport(SchedulerSupport.NONE)
    public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {
        return subscribe(onNext, onError, Functions.EMPTY_ACTION, Functions.emptyConsumer());
    }
```

위의 메소드를 보면 알 수 있듯이 subscribe()를 하는 시점에 Disposable객체를 반환합니다.








## RxJava의 생산자

Rxjava의 생산자들에 대해 알아보겠습니다.



### Observable

0..n개의 데이터를 전달하는 생산자 입니다.

Observer를 subscribe하거나

Consumer를 subscribe하는 방식으로 소비자를 추가할 수 있습니다.

```java
public interface Observer<T> {
    void onSubscribe(@NonNull Disposable d);
    void onNext(@NonNull T t);
    void onError(@NonNull Throwable e);
    void onComplete();
}
```

**onSubscirbe()**

데이터를 준비할 완료가 되면 이 함수를 호출합니다.

이 함수에서 Disposable을 매개변수로 받습니다.

**onNext()**

데이터를 전달할 때 이 함수를 호출합니다.

이 함수에서 데이터를 받아서 처리합니다.

**onComplete()**

이 함수가 호출되면 Observable이 완료된 것을 의미합니다.

**onError()**

에러를 전달할 때 이 함수를 호출합니다.

이 함수에서 에러를 받아서 처리합니다.


### Single

1개의 데이터를 전달하는 생산자 입니다.

SingleObserver를 subscribe하거나

Consumer를 subscribe하는 방식으로 소비자를 추가할 수 있습니다.


```java
public interface SingleObserver<T> {
    void onSubscribe(@NonNull Disposable d);
    void onSuccess(@NonNull T t);
    void onError(@NonNull Throwable e);
}
```


**onSuccess()**

데이터를 전달할 때 이 함수를 호출합니다.

이 함수에서 데이터를 받아서 처리합니다.





### Maybe

0..1개의 데이터를 전달하는 생산자 입니다.

MaybeObserver를 subscribe 하거나

Consumer를 subscribe하는 방식으로 소비자를 추가할 수 있습니다.

```java
public interface MaybeObserver<T> {
    void onSubscribe(@NonNull Disposable d);
    void onSuccess(@NonNull T t);
    void onError(@NonNull Throwable e);
    void onComplete()
}
```

**onSuccess()**

데이터를 전달할 때 이 함수를 호출 합니다.

여기서 데이터를 처리합니다.

**onComplete()**

이 함수가 호출되면 Maybe가 완료된 것을 의미합니다.


### Completable

0개의 데이터를 전달하는 생산자 입니다.

CompletableObserver를 subscribe하거나

Consumer를 subscribe하는 방식으로 소비자를 추가할 수 있습니다.


```java
public interface CompletableObserver {
    void onSubscribe(@NonNull Disposable d);
    void onComplete();
    void onError(@NonNull Throwable e);
}
```

**onComplete()**

이 함수가 호출되면 Completable()이 완료된 것을 의미합니다.



## Subejct

Rxjava의 Observable은 기본적으로 **차가운 Observbale** 입니다.

**차가운 Observable**이란 구독자가 구독한 시점부터 데이터를 발행하는 Observable입니다.

**뜨거운 Observable**이란 구독자의 존재 여부와 관계 없이 데이터를 발행하는 Observable입니다. 따라서 일정 시간이 지난 이후 구독을 한다면 중간 부분부터 구독을 하게 됩니다. 구독자의 경우 모든 데이터를 수신하는 것을 보장하고 있지 않기 때문에 데이터를 발행할 때 배압을 고려해야 합니다.

Cold Observable을 구독하는 모든 옵저버들은 자신만을 위해 독립적으로 실행하는 Observable을 가지게 됩니다. 하지만 Hot Observable을 구독하는 옵저버들은 단일의 Observable을 구독하게 되는 형태가 됩니다.

**Cold Observable**을 **Unicast하다**. **Hot Observable**을 **MultiCast하다** 라고 합니다.


차가운 Observable을 뜨거운 Observable로 만들려면 publish()나 share()같은 연산자를 사용할 수 있지만 Subject를 이용하는 것도 편리합니다.




**Subject의 특징**

Observable과 Observer의 성격을 둘 다 가지고 있는 클래스 입니다.

Observable이 가지고 있는 subscribe와 여러 operator를 사용할 수 있습니다.

Observer가 가지고 있는 onNext, onError, onComplete를 사용할 수 있습니다.

subscribe를 했을 때 데이터를 넘겨주는 방식에 따라 Publish, Behavior, Replay, Async로 나누어져 있습니다.


# PublishSubject

![image](https://user-images.githubusercontent.com/43161981/84801293-f21f8d80-b039-11ea-923b-4d6908208fdb.png)


구독한 시점부터 데이터를 새로 받아오는 Subject 입니다.

새로 구독하는 Observer는 이전의 데이터를 받지 못합니다.

```kotlin

    //publishSubject
    val publishSubject = PublishSubject.create<Int>()
    publishSubject.subscribe { println("1번째 Observer -> $it") }
    publishSubject.onNext(1)
    publishSubject.subscribe { println("2번째 Obsevrer -> $it") }
    publishSubject.onNext(2)
    publishSubject.onNext(3)
    publishSubject.subscribe { println("3번째 Observer -> $it") }
    publishSubject.onNext(4)

```

## 실행결과

![image](https://user-images.githubusercontent.com/43161981/84801134-c1d7ef00-b039-11ea-9986-b2a1cc634a69.png)


# BehaviorSubject

![image](https://user-images.githubusercontent.com/43161981/84801357-06fc2100-b03a-11ea-9121-defc9d2e00c2.png)


BehaviorSubject는 구독하면 subscribe()한 시점에서의 마지막데이터까지 받아옵니다.

생산하는 곳이 여러곳이 있을 경우 이걸 사용합니다.

BehaviorSubject는 구독직전의 첫번째 데이터를 받아올 수 있으므로 RxBus를 사용해야 할 때 사용하기에 적합합니다.

```kotlin

    //behaviorSubject
    val behaviorSubject = BehaviorSubject.create<Int>()
    behaviorSubject.subscribe { println("1번째 Observer -> $it") }
    behaviorSubject.onNext(1)
    behaviorSubject.subscribe { println("2번째 Observer -> $it") }
    behaviorSubject.onNext(2)
    behaviorSubject.onNext(3)
    behaviorSubject.subscribe { println("3번째 Observer -> $it") }
    behaviorSubject.onNext(4)

```

## 실행결과

![image](https://user-images.githubusercontent.com/43161981/84801825-9f92a100-b03a-11ea-82b3-8aa1a1f43315.png)


# ReplaySubject

![image](https://user-images.githubusercontent.com/43161981/84801995-e2547900-b03a-11ea-8833-0ddf673b399e.png)


ReplaySubject는 스트림의 중간에 구독을 해도 지금까지 발행된 데이터를 전부 받아올 수 있습니다.

```kotlin

    //replaySubject
    val replaySubject = ReplaySubject.create<Int>()
    replaySubject.subscribe { println("1번째 Observer -> $it") }
    replaySubject.onNext(1)
    replaySubject.subscribe { println("2번째 Observer -> $it") }
    replaySubject.onNext(2)
    replaySubject.onNext(3)
    replaySubject.subscribe { println("3번째 Observer -> $it") }
    replaySubject.onNext(4)

```

## 실행결과

![image](https://user-images.githubusercontent.com/43161981/84802193-32334000-b03b-11ea-9921-6996bbf6045f.png)

# AsyncSubject

Complete()가 되면 가장 마지막 데이터를 받게 됩니다.

```kotlin

    //asyncSubject
    val asyncSubject = AsyncSubject.create<Int>()
    asyncSubject.subscribe { println("1번째 Observer -> $it") }
    asyncSubject.onNext(1)
    asyncSubject.subscribe { println("2번째 Observer -> $it") }
    asyncSubject.onNext(2)
    asyncSubject.onNext(3)
    asyncSubject.subscribe { println("3번째 Observer -> $it") }
    asyncSubject.onNext(4)
    asyncSubject.onComplete()
```

## 실행결과

![image](https://user-images.githubusercontent.com/43161981/84802380-7a526280-b03b-11ea-97ed-41845cb388cb.png)


# 스케쥴러

Schedulers.computation() - 이벤트 룹에서 간단한 연산이나 콜백 처리를 위해 사용됩니다. RxComputationThreadPool라는 별도의 스레드 풀에서 돌아갑니다. 최대 갯수 개의 스레드 풀이 순환하면서 실행됩니다.

Schedulers.immediate() - 현재 스레드에서 즉시 수행합니다. 

observeOn()이 여러번 쓰였을 경우 immediate()를 선언한 바로 윗쪽의 스레드를 따라갑니다.

Schedulers.from(executor) - 특정 executor를 스케쥴러로 사용합니다.

Schedulers.io() - 동기 I/O를 별도로 처리시켜 비동기 효율을 얻기 위한 스케줄러입니다. 자체적인 스레드 풀 CachedThreadPool을 사용합니다. API 호출 등 네트워크를 사용한 호출 시 사용됩니다.

Schedulers.newThread() - 새로운 스레드를 만드는 스케쥴러입니다.

Schedulers.trampoline() - 큐에 있는 일이 끝나면 이어서 현재 스레드에서 수행하는 스케쥴러.

AndroidSchedulers.mainThread() - 안드로이드의 UI 스레드에서 동작합니다.

HandlerScheduler.from(handler) - 특정 핸들러 handler에 의존하여 동작합니다.