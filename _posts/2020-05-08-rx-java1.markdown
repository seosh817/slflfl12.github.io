---
layout: post
title:  "[RxJava] RxJava 정리 - (2) - Rxjava란? -"
subtitle:   "Rxjava"
categories: devlog
tags: rxjava
comments: true
---

![image](https://user-images.githubusercontent.com/43161981/81309756-3ffdb900-90be-11ea-9bdf-fd56f8d3cab1.png)

이미 RxJava를 사용을 하고 있지만 RxJava를 올바르게 사용하고 있는지
책과 스터디를 통해 다시 한번 정리함으로써 저는 더 개념을 확고히 하고 검색을 통해 오신 분들도 
Rxjava를 사용하면서 놓쳤던 개념들 있으셨다면 알아가셨으면 좋겠습니다.
그리고 제가 쓴 글 중에 만약 틀린 부분이 있다면 지적해 주시면 감사하겠습니다!

## Reactive Programming이란?


Rxjava를 공부하기에 앞서서 Reactive Programming이란 무엇인가에 대해 알아야 할 필요가 있습니다.
Reactive Programming이란, 데이터가 통지될 때마다 관련 프로그램이 반응(Reaction)해 데이터를 처리하는
프로그래밍 방식입니다.

예를 들면, GPS 위치 정보가 변경될 때의 데이터 전송 흐름을 상상해보면 이해가 쉽습니다. 이동해 위치 정보가 변경될 때마다
데이터를 전송하고 이동을 멈추면 데이터 전송도 중지하는 것 처럼 생성되는 데이터를 한 번에 보내지 않고 각각의 데이터가 생성될 때마다
순서대로 보냅니다. 이러한 데이터 흐름을 데이터 스트림(data stream)이라고 합니다.

다른 예를 들면, 'abc'라고 입력하면 입력 이벤트가 발생 할 때 다음과 같은 데이터가 생성된다고 생각할 수 있습니다.

1. [a]
2. [ab]
3. [abc]

버튼을 누르는 행위에 대한 구체적인 데이터가 없더라도 '버튼을 누르다'라는 이벤트는 데이터가 생성된다고 생각할 수 있습니다.
버튼을 계속 누른다면 누른 횟수만큼 '버튼을 '누르다'라는 이벤트가 계속 발생합니다. 즉, 이벤트도 발생할 때마다 데이터를
전송하는 데이터 스트림으로 다룰 수 있습니다.

리액티브 프로그래밍은  이러한 데이터 스트림으로 데이터를 전달받은 프로그램이 그때마다 적절히 처리할 수 있게 구성되었습니다.

종합해보면 프로그램이 필요한 **데이터를 직접 가져와 처리하는 것**이 아니라 **보내온 데이터를 받은 시점에 반응해 이를 처리하는 프로그램을 만드는 것**이 **Reactive Programming**입니다.


## Rxjava의 특징

RxJava는 디자인 패턴인 옵저버(Observer) 패턴을 확장했습니다. 옵저버 패턴은 객체의 상태 변화를 관찰자들, 즉 **옵저버**들의 목록을 객체에 등록하여 상태 변화가 있을 때 마다
메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴입니다. 이 패턴의 특징을 잘 살리면 쉽게 **데이터를 생성하는 측**과 **데이터를 소비하는 측**으로 나눌 수 있기 때문에 쉽게 데이터 스트림을 처리할 수 있습니다.
즉, 데이터를 통지하는 측이 무엇을 하더라도 데이터를 받는 측의 처리가 받은 데이터에 의해서만 바뀌게 된다면 비동기로 쉽게 전환할 수 있습니다.

**코틀린으로 구현한 옵저버 패턴**

``` kotlin
typealias Observer<T> = (event:T) -> Unit
class EventSource<T> {

    private var observers = mutableListOf<Observer<T>>()


    fun addObserver(observer: Observer<T>) {
        observers.add(observer)
    }

    fun notify(event: T) {
        for(observer in observers) {
            observer.invoke(event)
        }
    }

}
fun main() {

    val eventSource = EventSource<String> ()
    eventSource.addObserver { println("첫 번째 옵저버: $it") }
    eventSource.addObserver { println("두 번째 옵저버: $it") }
    eventSource.notify("Hello")
    eventSource.notify("Observer Pattern")
}
```
**실행결과**
![image](https://user-images.githubusercontent.com/43161981/81314723-6aeb0b80-90c4-11ea-821c-4613490437ec.png)


RxJava의 또 다른 특징으로 쉬운 비동기 처리를 만들 수 있습니다. Reactive Streams 규칙의 근간이 되는 Observable 규약이라는 Rxjava 개발 가이드라인을 따른 구현이라면 직접
스레드(Thread)를 관리하는 번거로움에서 해방될 뿐만 아니라 구현도 간단하게 할 수 있습니다. 또한 동기 처리나 비동기 처리나 구현 방법에 큰 차이가 없는 것도 RxJava의 큰 특징 입니다.

RxJava는 ReactiveX(Reactive Extensions)의 JVM 구현입니다.

Rx에는 크게 3가지의 역할이 있습니다.
생산자 -> 데이터를 생산하여 전달
소비자 -> 데이터를 받아서 처리
연산자 -> 데이터를 중간에서 가공(생산, 변환, 조합, 거름) 처리


Rxjava는 소비자(Subscriber/Observer)가 생산자(Observable/Flowable/Completable/Maybe/Single)를 구독하는 형태로 만들어져 있습니다.
간단히 말하면, **생산자는 데이터를 생산하고 통지하는 클래스이며, 소비자는 통지된 데이터를 전달받아 이 데이터를 처리합니다.**

생산자는 다음 포스트에 정리하도록 하겠습니다.

**3가지 역할의 예시**
```kotlin
    Observable // 생산자
        .just(0, 1, 2, 3) // 생산 연산자
        .map { it * 2 } // 변경 연산자
        .subscribe { // 소비자
            println(it)
        }
```

그리고 각 역할들은 각각 다른 Scheduler에서 처리를 할 수 있습니다.



## Disposable이란?

**Disposable은 구독을 해지하는 메서드를 포함하는 인터페이스**
subscribe()함수를 실행하면 Disposable 객체가 반환 됩니다.
Disposable을 통해 데이터를 생산해서 소비까지 시간이 오래 걸리는 경우에 현재 작업을 취소할 수 있습니다.
Disposable#dispose() 함수를 통해 현재 작업을 취소할 수 있습니다.
구독 해지 뿐만 아니라 자원을 해제하는 등의 처리에도 활용 가능합니다. 만약, 처리가 끝날 때에 자원을 해제해야 한다면 dispose()메소드에 구현하면 됩니다.

 **예시**
  - 새로운 작업을 진행 할 때 이전 작업을 취소
  - 화면을 떠날 때 진행 하던 작업을 취소

## CompositeDisposable이란?

**CompositeDisposable은 Disposable을 저장하는 Container**

 CompositeDisposable은 여러 Disposable을 모아 CompositeDisposable의 dispose()메소드를 호출함으로써 가지고 있는 모든 Disposable의 dispose 메서드를 호출할 수 있는 클래스 입니다.

add(), addAll() 함수로 Disposable 객체를 추가 할 수 있으며, clear(), dispose() 함수로 dispose()를 처리 할 수 있습니다.

**clear()와 dispose()의 차이는 무엇일까?**

 - clear()를 호출하면 호출한 CompositeDisposable 객체는 재사용 가능합니다.
 - dispose()를 호출하면 호출한 CompositeDisposable 객체는 재사용이 불가능합니다. ( add()하는 시점에 dispose() 시켜버립니다.)

 ```kotlin

    val compositeDisposable = CompositeDisposable()
    val disposable1 = Observable.just(1, 2)
        .subscribe { println(it) }
    compositeDisposable.add(disposable1)
    compositeDisposable.clear() // dispose()
    val disposable2 = Observable.just(3, 4)
        .delay(1, TimeUnit.SECONDS)
        .subscribe { println(it) }
    compositeDisposable.add(disposable2)
    Thread.sleep(2000L)

    val compositeDisposable2 = CompositeDisposable()
    val disposable3 = Observable.just(1, 2)
        .subscribe { println(it) }
    compositeDisposable2.add(disposable3)
    compositeDisposable2.dispose() // dispose()
    val disposable4 = Observable.just(3, 4)
        .delay(1, TimeUnit.SECONDS)
        .subscribe { println(it) }
    compositeDisposable2.add(disposable4)
    Thread.sleep(2000L)

 ```

 **실행결과**
 ![image](https://user-images.githubusercontent.com/43161981/81379108-7c272d00-9143-11ea-9b3d-4094757f0f5d.png)

위에 실행결과를 보면 알 수 있듯이 첫번째 compositable 객체는 clear()함수를 호출해서 재사용 가능 하므로
1,2,3,4가 모두 찍히는 것을 알 수 있고

두번째 CompositeDisposable 객체는 dispose()함수의 호출로 인해 재사용이 불가능 하므로
1,2만 찍히는 것을 알 수 있습니다.

**clear()함수의 내부구조**
```java
public void clear() {
    if (disposed) {
        return;
    }
    OpenHashSet<Disposable> set;
    synchronized (this) {
        if (disposed) {
            return;
        }

        set = resources;
        resources = null;
    }

    dispose(set);
}
```

**dispose()함수의 내부구조**
```java
@Override
public void dispose() {
    if (disposed) {
        return;
    }
    OpenHashSet<Disposable> set;
    synchronized (this) {
        if (disposed) {
            return;
        }
        disposed = true;
        set = resources;
        resources = null;
    }

    dispose(set);
}
```

clear()와는 달리 dipose()함수는 내부구조에서 disposed 라는 flag 변수를 통해
함수가 불릴 때 disposed = true가 되어서 재활용 할 수 없음을 알 수 있습니다.





## 마블 다이어그램

<img width="605" alt="legend" src="https://user-images.githubusercontent.com/43161981/81379666-7d0c8e80-9144-11ea-9736-48e2aabd276a.png">

출처 : http://reactivex.io/RxJava/javadoc/io/reactivex/Observable.html

마블 다이어그램은 데이터의 흐름을 도식화한 것 입니다.

알록달록한 색깔로 되어 있는 도형들은 데이터이고 첫번 째 줄에서 시간 순으로 데이터가 발행 되는 것을 뜻 합니다.
데이터를 발행할 때에는 onNext()함수를 통해 발행 됩니다.

통지하는 데이터를 생성하거나 필터링 또는 변환하는 메서드를 연산자라고 합니다.
메서드를 순차적으로 연결해 나가는 것을 메서드 체이닝(method chaining)이라고 하고 이러한 메서드들의 연결을 통해서
최종 데이터의 처리를 단계적으로 설정할 수 있습니다.

위 그림에서 점선 화살표는 각각 입력, 출력을 뜻하고, 연산자를 통해 변환 되는 것을 알 수 있고, 실제로는 존재하지 않는 연산자지만
flip()함수를 통해 출력된 도형의 모양이 뒤집혀 진 것을 확인 할 수 있고 결과는 새로운 Observable 객체가 생성됩니다.

파이프(ㅣ) -> 정상적으로 데이터 발행을 완료했다는 것을 의미합니다. 이 때 onComplete() 함수가 실행 됩니다.
X표시 -> 에러가 발생하였음을 의미합니다. 이 때 onError() 함수가 실행 됩니다.

따라서 이 마블 다이어그램은 데이터가 3개까지만 발행되고 에러가 발생되었 다는 것을 알 수 있습니다.



다음 포스트에는 생산자에 대해 정리하겠습니다.